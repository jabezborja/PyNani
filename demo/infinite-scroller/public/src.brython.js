__BRYTHON__.use_VFS = true;
var scripts = {"$timestamp": 1664189737981, "settings": [".py", "from typing import Dict,List\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nROUTES:Dict[str,Dict[str,str]]={\n\"/\":{\n\"title\":\"A PyFyre App\",\n\"icon\":\"/favicon.ico\"\n}\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nDEPENDENCIES:List[str]=[]\n", ["typing"]], "index": [".py", "from pyfyre import render\nfrom pyfyre.nodes import *\n\n\nclass App(Element):\n def __init__(self)->None :\n  super().__init__(\"main\",children=[\n  Element(\"h1\",children=[TextNode(\"Infinite Scroller\")]),\n  ListBuilder(lambda index:Element(\"p\",children=[TextNode(index)]))\n  ])\n  \n  \nrender(\"body\",{\"/\":App()})\n", ["pyfyre", "pyfyre.nodes"]], "pyfyre": [".py", "from typing import Dict\nfrom pyfyre.nodes import Node\nfrom browser import document,window\nfrom pyfyre.router import RouteManager\nfrom pyfyre.exceptions import NodeNotFound\n\n__all__=[\n\"render\"\n]\n\n\ndef render(root_selector:str,routes:Dict[str,Node])->None :\n RouteManager.routes=routes\n nodes=document.select(root_selector)\n \n if nodes:\n  RouteManager.root_node=nodes[0]\n  RouteManager.render_route(window.location.pathname)\n else :\n  raise NodeNotFound(root_selector)\n", ["browser", "pyfyre.exceptions", "pyfyre.nodes", "pyfyre.router", "typing"], 1], "pyfyre.events": [".py", "from enum import Enum\n\n\nclass BaseEventType(Enum):\n pass\n \n \nclass EventType(BaseEventType):\n ''\n Cancel=\"cancel\"\n Error=\"error\"\n Scroll=\"scroll\"\n Select=\"select\"\n Wheel=\"wheel\"\n \n \nclass MouseEventType(BaseEventType):\n ''\n AuxClick=\"auxclick\"\n Click=\"click\"\n ContextMenu=\"contextmenu\"\n DbClick=\"dblclick\"\n MouseDown=\"mousedown\"\n MouseEnter=\"mouseenter\"\n MouseLeave=\"mouseleave\"\n MouseMove=\"mousemove\"\n MouseOut=\"mouseout\"\n MouseOver=\"mouseover\"\n MouseUp=\"mouseup\"\n", ["enum"]], "pyfyre.exceptions": [".py", "class PyFyreException(Exception):\n pass\n \n \nclass NodeNotFound(PyFyreException):\n pass\n", []], "pyfyre.router": [".py", "from typing import Dict\nfrom settings import ROUTES\nfrom browser import document\nfrom pyfyre.nodes import Node,Element,TextNode\n\n\nclass RouteManager:\n routes:Dict[str,Node]={}\n root_node=document.select(\"body\")\n \n @staticmethod\n def parse_route(route:str)->str:\n  el=document.createElement(\"a\")\n  el.href=route\n  route=str(el.pathname)\n  \n  if route ==\"/\":\n   return route\n   \n  return str(el.pathname).rstrip(\"/\")\n  \n @staticmethod\n def get_node(route:str)->Node:\n  route=RouteManager.parse_route(route)\n  return RouteManager.routes.get(route)or Element(\n  \"p\",children=[TextNode(\"404: Page Not Found :(\")]\n  )\n  \n @staticmethod\n def render_route(route:str)->None :\n  node=RouteManager.get_node(route)\n  RouteManager.root_node.innerHTML=\"\"\n  RouteManager.root_node.appendChild(node.dom)\n  \n @staticmethod\n def change_route(route:str)->None :\n  route=RouteManager.parse_route(route)\n  route_data=ROUTES.get(route)or {\n  \"title\":\"404: Page Not Found :(\"\n  }\n  \n  document.title=route_data.get(\"title\")\n  RouteManager.render_route(route)\n", ["browser", "pyfyre.nodes", "settings", "typing"]], "pyfyre.nodes.buttons": [".py", "from browser import DOMEvent\nfrom pyfyre.events import MouseEventType\nfrom pyfyre.nodes.base import Node,Element\nfrom typing import Callable,Optional,Dict,List,Union\n\n\nclass Button(Element):\n def __init__(\n self,onclick:Callable[[DOMEvent],None ],*,\n attrs:Optional[Dict[str,str]]=None ,\n children:Optional[Union[\n List[Node],\n Callable[[],List[Node]]\n ]]=None\n )->None :\n  super().__init__(\"button\",attrs=attrs,children=children)\n  self.add_event_listener(MouseEventType.Click,onclick)\n", ["browser", "pyfyre.events", "pyfyre.nodes.base", "typing"]], "pyfyre.nodes.links": [".py", "from pyfyre.events import MouseEventType\nfrom pyfyre.nodes.base import Node,Element\nfrom browser import DOMEvent,window,document\nfrom typing import Optional,Dict,List,Union,Callable\n\n\nclass Anchor(Element):\n def __init__(\n self,href:str,*,\n attrs:Optional[Dict[str,str]]=None ,\n children:Optional[Union[\n List[Node],\n Callable[[],List[Node]]\n ]]=None\n )->None :\n  self.href=href\n  attrs=attrs or {}\n  attrs[\"href\"]=href\n  \n  super().__init__(\"a\",attrs=attrs,children=children)\n  \n  if self.is_internal():\n   def change_route(event:DOMEvent)->None :\n   \n    from pyfyre.router import RouteManager\n    \n    window.history.pushState(None ,None ,self.absolute_href)\n    event.preventDefault()\n    RouteManager.change_route(href)\n    \n   self.add_event_listener(MouseEventType.Click,change_route)\n   \n @property\n def absolute_href(self)->str:\n  el=document.createElement(\"a\")\n  el.href=self.href\n  return el.href\n  \n def is_internal(self)->bool:\n  el=document.createElement(\"a\")\n  el.href=self.href\n  return bool(el.host ==window.location.host)\n", ["browser", "pyfyre.events", "pyfyre.nodes.base", "pyfyre.router", "typing"]], "pyfyre.nodes.lists": [".py", "from browser import DOMEvent,aio\nfrom pyfyre.events import EventType\nfrom pyfyre.nodes import Node,Element\nfrom typing import Optional,Dict,List,Callable\n\n\nclass ListBuilder(Element):\n def __init__(\n self,children_builder:Callable[[int],Optional[Node]],*,\n max_height:str=\"300px\",\n render_batch:int=10,\n render_interval:float=0.1,\n attrs:Optional[Dict[str,str]]=None\n )->None :\n  self.rendered_children:List[Node]=[]\n  \n  super().__init__(\"div\",attrs=attrs,children=lambda :self.rendered_children)\n  self.dom.style.overflowY=\"scroll\"\n  self.dom.style.overflowWrap=\"break-word\"\n  self.dom.style.maxHeight=max_height\n  \n  self._index=0\n  \n  def render_child()->None :\n   for _ in range(render_batch):\n    child=children_builder(self._index)\n    \n    if child is None :\n     return\n     \n    self.rendered_children.append(child)\n    self._index +=1\n    \n   self.update_dom()\n   \n  async def render_children()->None :\n   if self.dom.scrollHeight ==self.dom.clientHeight:\n    render_child()\n    await aio.sleep(render_interval)\n    await render_children()\n    \n  def render_nodes(event:DOMEvent)->None :\n   el=event.target\n   if el.scrollHeight -el.scrollTop -el.clientHeight <1:\n    render_child()\n    \n  aio.run(render_children())\n  self.add_event_listener(EventType.Scroll,render_nodes)\n", ["browser", "pyfyre.events", "pyfyre.nodes", "typing"]], "pyfyre.nodes.base": [".py", "import sys\nfrom typing import Type\nfrom browser import document\nfrom types import TracebackType\nfrom abc import ABC,abstractmethod\nfrom browser import DOMNode,DOMEvent\nfrom pyfyre.events import BaseEventType\nfrom typing import Any,Dict,List,Optional,Callable,Union\n\n\nclass Node(ABC):\n def __init__(self)->None :\n  self.dom=self.create_dom()\n  \n @abstractmethod\n def create_dom(self)->DOMNode:\n  raise NotImplementedError\n  \n @abstractmethod\n def update_dom(self)->None :\n  raise NotImplementedError\n  \n  \nclass Element(Node):\n def __init__(\n self,tag_name:str,*,\n attrs:Optional[Dict[str,str]]=None ,\n children:Optional[Union[\n List[Node],\n Callable[[],List[Node]]\n ]]=None\n )->None :\n  self.tag_name=tag_name\n  self.attrs=attrs or {}\n  \n  self._children_builder=children if callable(children)else None\n  self.children=(\n  self._secure_build()if callable(children)else children\n  )or []\n  \n  super().__init__()\n  \n def _secure_build(self)->List[Node]:\n  if self._children_builder is None :\n   return self.children\n   \n  try :\n   return self._children_builder()\n  except BaseException:\n   return self.on_build_error(*sys.exc_info())\n   \n def on_build_error(\n self,exc_type:Type[BaseException],\n exc_value:BaseException,exc_traceback:TracebackType\n )->List[Node]:\n  return [\n  Element(\"p\",children=[TextNode(exc_type)]),\n  Element(\"p\",children=[TextNode(exc_value)]),\n  Element(\"p\",children=[TextNode(exc_traceback)])\n  ]\n  \n def create_dom(self)->DOMNode:\n  el=document.createElement(self.tag_name)\n  \n  for attr_name,attr_value in self.attrs.items():\n   el.setAttribute(attr_name,attr_value)\n   \n  el.replaceChildren(*[c.dom for c in self.children])\n  return el\n  \n def update_dom(self)->None :\n  for attr_name,attr_value in self.attrs.items():\n   self.dom.setAttribute(attr_name,attr_value)\n   \n  self.children=self._secure_build()\n  self.dom.replaceChildren(*[c.dom for c in self.children])\n  \n def add_event_listener(\n self,event_type:BaseEventType,callback:Callable[[DOMEvent],None ]\n )->None :\n  self.dom.bind(event_type.value,callback)\n  \n  \nclass TextNode(Node):\n def __init__(self,value:Any)->None :\n  self._value=str(value)\n  super().__init__()\n  \n @property\n def value(self)->str:\n  return self._value\n  \n def set_value(self,value:Any)->None :\n  self._value=str(value)\n  \n def create_dom(self)->DOMNode:\n  return document.createTextNode(self.value)\n  \n def update_dom(self)->None :\n  self.dom.nodeValue=self.value\n", ["abc", "browser", "pyfyre.events", "sys", "types", "typing"]], "pyfyre.nodes": [".py", "from .base import Node,Element,TextNode\nfrom .buttons import Button\nfrom .links import Anchor\nfrom .lists import ListBuilder\n\n__all__=[\n\"Node\",\n\"Element\",\n\"TextNode\",\n\"Button\",\n\"Anchor\",\n\"ListBuilder\"\n]\n", ["pyfyre.nodes.base", "pyfyre.nodes.buttons", "pyfyre.nodes.links", "pyfyre.nodes.lists"], 1]}
__BRYTHON__.update_VFS(scripts)
