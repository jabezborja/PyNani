__BRYTHON__.use_VFS = true;
var scripts = {"$timestamp": 1664190080728, "random_string": [".py", "import io\nimport random\n\n\nALPHABET=''.join([chr(x)for x in range(ord('a'),ord('z')+1)])+\\\n''.join([chr(x)for x in range(ord('A'),ord('Z')+1)])+\\\n''.join([str(x)for x in range(0,10)])\n\n\ndef generate(min_length=12,max_length=18,alphabet=ALPHABET):\n ''\n\n\n\n\n\n\n\n\n\n\n\n\n\n \n res=io.StringIO()\n for i in range(random.randint(min_length,max_length)):\n  res.write(random.choice(alphabet))\n res.seek(0)\n return res.read()\n \n \nif __name__ =='__main__':\n import doctest\n doctest.testmod()\n", ["doctest", "io", "random"]], "url64.url64": [".py", "import json\nfrom base64 import urlsafe_b64encode,urlsafe_b64decode\n\n__all__=['encode','decode']\n\n\ndef pad(s):\n return s+'='*(4 -len(s)&3)\n \n \ndef encode(s):\n if isinstance(s,dict):\n  s=json.dumps(s).encode()\n  \n if isinstance(s,str):\n  s=s.encode()\n return urlsafe_b64encode(s).decode().rstrip(\"=\")\n \n \ndef decode(s):\n return urlsafe_b64decode(pad(s)).decode()\n", ["base64", "json"]], "url64": [".py", "from .url64 import decode,encode\n\n__all__=['encode','decode']\n", ["url64.url64"], 1], "text_generator.main": [".py", "''\n\n\n\n\n\n\n\n\n\n\n\n\n\nimport random_string as string\nimport url64\nimport random\n\n\ndef generate(length_minimal=10,length_maximal=15,int_min_length=9999,int_max_length=9999999):\n ''\n\n\n\n\n\n \n code_type=random.choice(\n ['Alphabets','Numbers','Both'])\n if code_type ==\"Alphabets\":\n  final=string.generate(\n  length_minimal,length_maximal)\n  return final\n elif code_type ==\"Numbers\":\n  stage1=string.generate(\n  length_minimal,length_maximal,alphabet='1234567890')\n  final=f\"{stage1}\"\n  return final\n elif code_type ==\"Both\":\n  stage1=string.generate(\n  length_minimal,length_maximal)\n  stage2=random.randint(\n  int_min_length,int_max_length)\n  \n  stage3=f\"{stage1}{stage2}\"\n  final=url64.encode(stage3)\n  return final\n", ["random", "random_string", "url64"]], "text_generator": [".py", "from .main import generate\n", ["text_generator.main"], 1]}
__BRYTHON__.update_VFS(scripts)
